# you can test locally by using:
# gitlab-runner exec docker {test_name}

# use ubuntu image (lts)
image: ubuntu:latest

variables:
    QT_QPA_PLATFORM: "offscreen"

before_script:
  # general
  - pwd
  - ls -a
  - apt-get update
  - apt-get install -y software-properties-common wget

  - export DEBIAN_FRONTEND=noninteractive
  - apt-get install -y tzdata
  - ln -fs /usr/share/zoneinfo/Europe/Zurich /etc/localtime
  - dpkg-reconfigure --frontend noninteractive tzdata

  # installing miniconda
  - cd /tmp
  - wget -O miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
  - chmod +x miniconda.sh
  - ./miniconda.sh -b -p /opt/miniconda3
  - export PATH=$PATH:/opt/miniconda3/bin

  # Setting up test environments
  # - conda env create -q -n test_environment python=$TRAVIS_PYTHON_VERSION --file environment.yml
  - conda create -n test_environment python=3.7 
  - conda init bash
  - source ~/.bashrc
  - source activate test_environment
  - pip install --upgrade pip
  - pip install coverage coveralls flake8
  - cd /root/
  - ls -a
  - pip install teili/ 

  - flake8 codebase

stages:
  - test
  - deploy

unit-tests:
  stage: test
  # the actual commands to run
  script:
    - cd ~/teiliApps/
    - coverage run -m unittest discover unit_tests/
  only:
    - master
    - dev
    - dev-ci

unit-test-deploy:
  stage: deploy
  script:
    - pip --no-cache-dir install --upgrade --force-reinstall teili
    - python -m teili.tools.generate_teiliApps
    - cd ~/teiliApps/
    - python -m unittest discover unit_tests/
    - coverage run -m unittest discover unit_tests/
  only:
    - master

# generate a coverage report to send to back to user
after_script:
  - coverage report
  - coveralls
  - rm -r /opt/miniconda3/
  - rm /tmp/miniconda.sh
  - rm -rf ~/teiliApps/
